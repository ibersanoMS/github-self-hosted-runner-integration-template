name: Destroy AKS runner(s)
on:
    workflow_dispatch:

permissions:
    id-token: write
    contents: read

env:
    TerraformWorkingDirectory: 'src/infra/terraform/runners'
    StateStoreContainerName: 'tfstate'
    StateStoreFilename: 'runners.tfstate'
jobs:
    destroy-runners:
        runs-on: 'ubuntu-latest'
        if: ${{ vars.DESTROYRUNNER == 'true' }}
        steps:
            - uses: actions/checkout@v3
            
            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v2
              with:
                terraform_wrapper: false
            
            - name: Azure login
              uses: azure/login@v1
              with:
                client-id: ${{secrets.AZURE_CLIENT_ID }}
                subscription-id: ${{secrets.AZURE_SUBSCRIPTION_ID }}
                tenant-id: ${{secrets.AZURE_TENANT_ID }}
            
            - name: Initialize Terraform
              id: init
              working-directory: 'src/infra/terraform/runners/${{ vars.RUNNERTYPE }}'
              run: |
                    terraform init \
                        -backend-config=resource_group_name=${{ vars.STATE_RESOURCE_GROUP_NAME}} \
                        -backend-config=storage_account_name=${{ vars.STORAGE_ACCOUNT_NAME }} \
                        -backend-config=container_name=${{ env.StateStoreContainerName }} \
                        -backend-config=key=${{ env.StateStoreFilename }}
                    echo resourceGroupName=$(terraform output -raw resourceGroupName) >> $GITHUB_OUTPUT
                    echo clusterName=$(terraform output -raw clusterName) >> $GITHUB_OUTPUT
              env:
                ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
                ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID  }}
                ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
                ARM_USE_OIDC: true

            # Set the target Azure Kubernetes Service (AKS) cluster. 
            - name: Set AKS context
              uses: azure/aks-set-context@v3
              with:
                cluster-name: ${{ steps.init.outputs.clusterName }}
                resource-group: ${{ steps.init.outputs.resourceGroupName }}

            - name: Uninstall Actions Runner Controller
              working-directory: 'src/manifests'
              run: |
                kubectl delete -f hra.yaml
                kubectl delete -f runnerdeployment.yaml

            - name: Remove Public IP
              if: ${{ vars.RUNNERTYPE == 'aks' }}
              working-directory: 'src/infra/terraform/runners/${{ vars.RUNNERTYPE }}'
              run: |
                terraform state rm azurerm_public_ip.ingressIP
              env:
                ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
                ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID  }}
                ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
                ARM_USE_OIDC: true
                
            - name: Apply Terraform
              working-directory: 'src/infra/terraform/runners/${{ vars.RUNNERTYPE }}'
              run: |
                  terraform destroy -auto-approve -var stateSaContainerName=${{ env.StateStoreContainerName }} -var stateSaName=${{ vars.STORAGE_ACCOUNT_NAME }} -var stateSaRg=${{ vars.STATE_RESOURCE_GROUP_NAME }}
              env:
                ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
                ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID  }}
                ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
                ARM_USE_OIDC: true
    destroy-envionment:
        runs-on: 'ubuntu-latest'
        needs: destroy-runners
        if: ${{ vars.DESTROYALL == 'true' }}
        steps:
            - uses: actions/checkout@v3
            
            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v2
              with:
                terraform_wrapper: false
            
            - name: Azure login
              uses: azure/login@v1
              with:
                client-id: ${{secrets.AZURE_CLIENT_ID }}
                subscription-id: ${{secrets.AZURE_SUBSCRIPTION_ID }}
                tenant-id: ${{secrets.AZURE_TENANT_ID }}
            
            - name: Initialize Terraform
              working-directory: 'src/infra/terraform/runner-infra'
              run: |
                  terraform init \
                      -backend-config=resource_group_name=${{ vars.STATE_RESOURCE_GROUP_NAME}} \
                      -backend-config=storage_account_name=${{ vars.STORAGE_ACCOUNT_NAME }} \
                      -backend-config=container_name=${{ env.StateStoreContainerName }} \
                      -backend-config=key="environment.tfstate"
              env:
               ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
               ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID  }}
               ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
               ARM_USE_OIDC: true
                 
            - name: Apply Terraform
              working-directory: 'src/infra/terraform/runner-infra'
              run: |
                 terraform destroy -auto-approve
              env:
                 ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
                 ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID  }}
                 ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
                 ARM_USE_OIDC: true
