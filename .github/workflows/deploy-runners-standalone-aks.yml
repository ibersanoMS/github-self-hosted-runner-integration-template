name: AKS Standalone
        
on:
    workflow_dispatch:

permissions:
    id-token: write
    contents: read

jobs:
    deploy-environment:
        runs-on: 'ubuntu-latest'
        env:
          TerraformWorkingDirectory: 'src/infra/terraform/runner-infra'
          StateStoreContainerName: 'tfstate'
          StateStoreFilename: 'environment.tfstate'
        outputs:
          resourceGroupName: ${{ steps.vnetInfo.outputs.resourceGroupName }}
        steps:
            - uses: actions/checkout@v4
            
            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v3
              with:
                terraform_wrapper: false
            
            - name: Azure login
              uses: azure/login@v1
              with:
                client-id: ${{secrets.AZURE_CLIENT_ID }}
                subscription-id: ${{secrets.AZURE_SUBSCRIPTION_ID }}
                tenant-id: ${{secrets.AZURE_TENANT_ID }}
            
            - name: Initialize Terraform
              working-directory: ${{ env.TerraformWorkingDirectory }}
              run: |
                  terraform init \
                      -backend-config=resource_group_name=${{ vars.STATE_RESOURCE_GROUP_NAME}} \
                      -backend-config=storage_account_name=${{ vars.STORAGE_ACCOUNT_NAME }} \
                      -backend-config=container_name=${{ env.StateStoreContainerName }} \
                      -backend-config=key=${{ env.StateStoreFilename }}
              env:
               ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
               ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID  }}
               ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
               ARM_USE_OIDC: true
            
            - name: Plan Terraform
              working-directory: ${{ env.TerraformWorkingDirectory }}
              run: terraform plan -out=tf_plan --var-file="terraform.tfvars"
              env:
                 ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
                 ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID  }}
                 ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
                 ARM_USE_OIDC: true
                 
            - name: Apply Terraform
              id: vnetInfo
              working-directory: ${{ env.TerraformWorkingDirectory }}
              run: |
                 terraform apply -auto-approve tf_plan
                 echo vnetId=$(terraform output vnetId) >> $GITHUB_OUTPUT
                 echo resourceGroupName=$(terraform output resourceGroupName) >> $GITHUB_OUTPUT
              env:
                 ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
                 ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID  }}
                 ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
                 ARM_USE_OIDC: true
    deploy-runners:
      needs: deploy-environment
      runs-on: 'ubuntu-latest'
      env:
        TerraformWorkingDirectory: 'src/infra/terraform/runners/aks'
        StateStoreContainerName: 'tfstate'
        StateStoreFilename: 'runners.tfstate'
      steps:
            - uses: actions/checkout@v4
            
            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v3
              with:
                terraform_wrapper: false
            
            - name: Azure login
              uses: azure/login@v1
              with:
                client-id: ${{secrets.AZURE_CLIENT_ID }}
                subscription-id: ${{secrets.AZURE_SUBSCRIPTION_ID }}
                tenant-id: ${{secrets.AZURE_TENANT_ID }}
            
            - name: Initialize Terraform
              working-directory: ${{ env.TerraformWorkingDirectory }}
              run: |
                  terraform init \
                      -backend-config=resource_group_name=${{ vars.STATE_RESOURCE_GROUP_NAME}} \
                      -backend-config=storage_account_name=${{ vars.STORAGE_ACCOUNT_NAME }} \
                      -backend-config=container_name=${{ env.StateStoreContainerName }} \
                      -backend-config=key=${{ env.StateStoreFilename }}
              env:
               ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
               ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID  }}
               ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
               ARM_USE_OIDC: true
            
            - name: Plan Terraform
              working-directory: ${{ env.TerraformWorkingDirectory }}
              run: terraform plan -out=tf_plan -var stateSaContainerName=${{ env.StateStoreContainerName }} -var stateSaName=${{ vars.STORAGE_ACCOUNT_NAME }} -var stateSaRg=${{ vars.STATE_RESOURCE_GROUP_NAME }}
              env:
                 ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
                 ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID  }}
                 ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
                 ARM_USE_OIDC: true
                 
            - name: Apply Terraform
              id: clusterInfo
              working-directory: ${{ env.TerraformWorkingDirectory }}
              run: |
                 terraform apply -auto-approve tf_plan
                 echo resourceGroupName=$(terraform output -raw resourceGroupName) >> $GITHUB_OUTPUT
                 echo clusterName=$(terraform output -raw clusterName) >> $GITHUB_OUTPUT
                 echo publicIP=$(terraform output -raw publicIP) >> $GITHUB_OUTPUT
              env:
                 ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
                 ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID  }}
                 ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
                 ARM_USE_OIDC: true

           # Set the target Azure Kubernetes Service (AKS) cluster. 
            - name: Set AKS context
              uses: azure/aks-set-context@v3
              with:
                cluster-name: ${{ steps.clusterInfo.outputs.clusterName }}
                resource-group: ${{ steps.clusterInfo.outputs.resourceGroupName }}

            - name: Setup ingress
              working-directory: 'src/manifests'
              run: |
                NAMESPACE=ingress-selfhosted
                DNS_LABEL=ingress-selfhosted
                STATIC_IP=${{ steps.clusterInfo.outputs.publicIP }}
                echo $STATIC_IP
                helm repo add jetstack https://charts.jetstack.io
                helm repo update

                helm upgrade --install cert-manager jetstack/cert-manager \
                  --create-namespace \
                  --namespace cert-manager \
                  --version v1.8.2 \
                  --set installCRDs=true
                  
                helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
                helm repo update
                
                helm upgrade --install my-nginx ingress-nginx/ingress-nginx \
                  --create-namespace \
                  --namespace $NAMESPACE \
                  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-dns-label-name"=$DNS_LABEL \
                  --set controller.service.loadBalancerIP=$STATIC_IP \
                  --set controller.service.annotations."service\.beta\.kubernetes\.io/azure-load-balancer-health-probe-request-path"=/healthz
                
                kubectl apply -n cert-manager -f certissuer.yaml

            - name: Install Actions Runner Controller 
              working-directory: 'src/manifests'
              run: |
                kubectl describe ns actions-runner-system || kubectl create namespace actions-runner-system
                if [ $(kubectl get secret -n actions-runner-system controller-manager --output='name') == 'secret/controller-manager' ]; then
                  kubectl delete secret controller-manager -n actions-runner-system
                  kubectl create secret generic controller-manager -n actions-runner-system --from-literal=github_token=${{ secrets.GH_PAT }}
                  echo "Secret updated."
                else
                  echo "Secret does not exist. Creating secret..."
                  kubectl create secret generic controller-manager -n actions-runner-system --from-literal=github_token=${{ secrets.GH_PAT }}
                  echo "Secret created."
                fi
                helm repo add actions-runner-controller https://actions-runner-controller.github.io/actions-runner-controller
                helm upgrade --install --namespace actions-runner-system --create-namespace \
                          --wait actions-runner-controller actions-runner-controller/actions-runner-controller
                          
                helm upgrade --install --namespace actions-runner-system --create-namespace \
                            --wait actions-runner-controller actions-runner-controller/actions-runner-controller \
                            --set "githubWebhookServer.enabled=true"
                
                kubectl apply -n actions-runner-system -f ingress.yaml
                sed -i '/repository:/c\      repository: ${{ github.repository }}' runnerdeployment.yaml
                sed -i '/email:/c\    email: ${{ secrets.email }}' certissuer.yaml
                kubectl apply -f runnerdeployment.yaml
                kubectl apply -f hra.yaml
