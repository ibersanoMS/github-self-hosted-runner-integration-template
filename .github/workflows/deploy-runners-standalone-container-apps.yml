name: Container Apps Standalone
        
on:
    workflow_dispatch:

permissions:
    id-token: write
    contents: read

env:
    StateStoreContainerName: 'tfstate'
    StateStoreFilename: 'runner-infra.tfstate'
jobs:
    deploy-environment:
        runs-on: 'ubuntu-latest'
        outputs:
          acrName: ${{ steps.container-environment.outputs.acrName }}
          resourceGroupName: ${{ steps.runner-infra.outputs.resourceGroupName }}
          location: ${{ steps.runner-infra.outputs.location }}
          environmentId: ${{ steps.container-environment.outputs.environmentId }}
        env:
          TerraformWorkingDirectory: 'src/infra/terraform/runner-infra'
        steps:
            - uses: actions/checkout@v3
            
            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v2
              with:
                terraform_wrapper: false
            
            - name: Azure login
              uses: azure/login@v1
              with:
                client-id: ${{secrets.AZURE_CLIENT_ID }}
                subscription-id: ${{secrets.AZURE_SUBSCRIPTION_ID }}
                tenant-id: ${{secrets.AZURE_TENANT_ID }}
            
            - name: Initialize Terraform
              working-directory: ${{ env.TerraformWorkingDirectory }}
              run: |
                  terraform init \
                      -backend-config=resource_group_name=${{ vars.STATE_RESOURCE_GROUP_NAME}} \
                      -backend-config=storage_account_name=${{ vars.STORAGE_ACCOUNT_NAME }} \
                      -backend-config=container_name=${{ env.StateStoreContainerName }} \
                      -backend-config=key=${{ env.StateStoreFilename }}
              env:
               ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
               ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID  }}
               ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
               ARM_USE_OIDC: true
            
            - name: Plan Terraform
              working-directory: ${{ env.TerraformWorkingDirectory }}
              run: terraform plan -out=tf_plan --var-file="terraform.tfvars"
              env:
                 ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
                 ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID  }}
                 ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
                 ARM_USE_OIDC: true
                 
            - name: Apply Terraform
              id: runner-infra
              working-directory: ${{ env.TerraformWorkingDirectory }}
              run: |
                 terraform apply -auto-approve tf_plan
                 echo runnerSubnetId=$(terraform output -raw runnerSubnetId) >> $GITHUB_OUTPUT
                 echo vnetId=$(terraform output -raw vnetId) >> $GITHUB_OUTPUT
                 echo resourceGroupName=$(terraform output -raw resourceGroupName) >> $GITHUB_OUTPUT
                 echo location=$(terraform output -raw location) >> $GITHUB_OUTPUT
              env:
                 ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
                 ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID  }}
                 ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
                 ARM_USE_OIDC: true
            
    create-container-apps-environment:
      needs: deploy-environment
      runs-on: 'ubuntu-latest'
      outputs:
        acrName: ${{ steps.container-environment.outputs.acrName }}
        environmentId: ${{ steps.container-environment.outputs.environmentId }}
      env:
        TerraformWorkingDirectory: 'src/infra/terraform/runners/container-apps'
      steps:
        - uses: actions/checkout@v3
        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v2
          with:
            terraform_wrapper: false
        - name: Azure login
          uses: azure/login@v1
          with:
            client-id: ${{secrets.AZURE_CLIENT_ID }}
            subscription-id: ${{secrets.AZURE_SUBSCRIPTION_ID }}
            tenant-id: ${{secrets.AZURE_TENANT_ID }}
        - name: Initialize Terraform
          working-directory: ${{ env.TerraformWorkingDirectory }}
          run: |
              terraform init \
                  -backend-config=resource_group_name=${{ vars.STATE_RESOURCE_GROUP_NAME}} \
                  -backend-config=storage_account_name=${{ vars.STORAGE_ACCOUNT_NAME }} \
                  -backend-config=container_name=${{ env.StateStoreContainerName }} \
                  -backend-config=key=container_apps_environment.tfstate
          env:
            ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
            ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID  }}
            ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
            ARM_USE_OIDC: true

        - name: Plan Terraform
          working-directory: ${{ env.TerraformWorkingDirectory }}
          run: terraform plan -out=tf_plan --var-file="terraform.tfvars" -var location="eastus" -var resourceGroupName=${{ needs.deploy-environment.outputs.resourceGroupName }}
          env:
            ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
            ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID  }}
            ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
            ARM_USE_OIDC: true
                
        - name: Apply Terraform
          id: container-environment
          working-directory: ${{ env.TerraformWorkingDirectory }}
          run: |
            terraform apply -auto-approve tf_plan
            echo acrName=$(terraform output -raw acrName) >> $GITHUB_OUTPUT
            ENV_ID=$(terraform output -raw environmentId) |  base64 -w 0
            echo environmentId=$ENV_ID >> $GITHUB_OUTPUT
          env:
            ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
            ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID  }}
            ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
            ARM_USE_OIDC: true
    create-base-image:
      needs: create-container-apps-environment
      runs-on: 'ubuntu-latest'
      steps:
        - uses: actions/checkout@v3
        - name: Azure login
          uses: azure/login@v1
          with:
            client-id: ${{secrets.AZURE_CLIENT_ID }}
            subscription-id: ${{secrets.AZURE_SUBSCRIPTION_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        - name: Connect to Azure Container Registry (ACR)
          id: acrconnect
          run: |
            EXISTS=`az acr repository show -n ${{ needs.create-container-apps-environment.outputs.acrName }} --image mariner:2.0 | jq '.name'`
            if [ $EXISTS -eq "2.0" ]
            then
                    echo "Retrieving access token from ${{ needs.create-container-apps-environment.outputs.acrName }}"
                    TOKEN=$(az acr login -n ${{ needs.create-container-apps-environment.outputs.acrName }} --expose-token)

                    if [ -z "$TOKEN" ]
                    then
                      echo "ACR Token was not retrieved successfully"
                      exit 1
                    fi

                    ACRTOKEN=$(echo $TOKEN | jq -r ".accessToken")
                    LOGINSERVER=$(echo $TOKEN | jq -r ".loginServer")

                    echo "ACR Login Server: $LOGINSERVER"
                    echo "::set-output name=loginServer::$LOGINSERVER"

                    echo "Passing token as stdin to docker login"
                    echo $ACRTOKEN | docker login $LOGINSERVER -u 00000000-0000-0000-0000-000000000000 --password-stdin
            fi
        - name: Container import to ACR
          run: |
            az acr import --name ${{ needs.create-container-apps-environment.outputs.acrName }} --source mcr.microsoft.com/cbl-mariner/base/core:2.0 --image mariner:2.0
    deploy-runners:
      needs: [deploy-environment, create-base-image, create-container-apps-environment]
      runs-on: 'ubuntu-latest'
      steps:
            - uses: actions/checkout@v3
            
            - name: Azure login
              uses: azure/login@v1
              with:
                client-id: ${{secrets.AZURE_CLIENT_ID }}
                subscription-id: ${{secrets.AZURE_SUBSCRIPTION_ID }}
                tenant-id: ${{secrets.AZURE_TENANT_ID }}

            - name: Deploy Container App jobs
              run: |
                ENV_ID=`echo -n ${{ needs.create-container-apps-environment.outputs.environmentId }} | base64 --decode`
                az containerapp job create -n "runners" -g ${{ needs.deploy-environment.outputs.resourceGroupName }} --environment $ENV_ID \
                --trigger-type Event \
                --replica-timeout 1800 \
                --replica-retry-limit 1 \
                --replica-completion-count 1 \
                --parallelism 1 \
                --image "${{ needs.create-container-apps-environment.outputs.acrName }}.azurecr.io/mariner:2.0" \
                --min-executions 0 \
                --max-executions 10 \
                --polling-interval 30 \
                --scale-rule-name "github-runner" \
                --scale-rule-type "github-runner" \
                --scale-rule-metadata "github-runner=https://api.github.com" "owner=${{github.repository_owner}}" "runnerScope=repo" "repos=${{github.repository}}" "targetWorkflowQueueLength=1" \
                --scale-rule-auth "personalAccessToken=personal-access-token" \
                --cpu "2.0" \
                --memory "4Gi" \
                --secrets "personal-access-token=${{ secrets.GITHUB_PAT }}" \
                --env-vars "GITHUB_PAT=secretref:personal-access-token" "REPO_URL=${{github.repositoryUrl}}" "REGISTRATION_TOKEN_API_URL=https://api.github.com/repos/${{github.repository}}/actions/runners/registration-token" \
                --registry-server "${{  needs.deploy-environment.outputs.acrName }}.azurecr.io"
