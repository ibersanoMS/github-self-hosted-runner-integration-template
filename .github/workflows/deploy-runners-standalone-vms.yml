name: VM Standalone
        
on:
    workflow_dispatch:

permissions:
    id-token: write
    contents: read

jobs:
  deploy-environment:
    runs-on: 'ubuntu-latest'
    env:
      TerraformWorkingDirectory: 'src/infra/terraform/runner-infra'
      StateStoreContainerName: 'tfstate'
      StateStoreFilename: 'environment.tfstate'
    outputs:
      resourceGroupName: ${{ steps.vnetInfo.outputs.resourceGroupName }}
    steps:
        - uses: actions/checkout@v4
        
        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v3
          with:
            terraform_wrapper: false
        
        - name: Azure login
          uses: azure/login@v2
          with:
            client-id: ${{secrets.AZURE_CLIENT_ID }}
            subscription-id: ${{secrets.AZURE_SUBSCRIPTION_ID }}
            tenant-id: ${{secrets.AZURE_TENANT_ID }}
        
        - name: Initialize Terraform
          working-directory: ${{ env.TerraformWorkingDirectory }}
          run: |
              terraform init \
                  -backend-config=resource_group_name=${{ vars.STATE_RESOURCE_GROUP_NAME}} \
                  -backend-config=storage_account_name=${{ vars.STORAGE_ACCOUNT_NAME }} \
                  -backend-config=container_name=${{ env.StateStoreContainerName }} \
                  -backend-config=key=${{ env.StateStoreFilename }}
          env:
           ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
           ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID  }}
           ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
           ARM_USE_OIDC: true
        
        - name: Plan Terraform
          working-directory: ${{ env.TerraformWorkingDirectory }}
          run: terraform plan -out=tf_plan --var-file="terraform.tfvars"
          env:
             ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
             ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID  }}
             ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
             ARM_USE_OIDC: true
             
        - name: Apply Terraform
          id: vnetInfo
          working-directory: ${{ env.TerraformWorkingDirectory }}
          run: |
             terraform apply -auto-approve tf_plan
             echo vnetId=$(terraform output vnetId) >> $GITHUB_OUTPUT
             echo resourceGroupName=$(terraform output resourceGroupName) >> $GITHUB_OUTPUT
          env:
             ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
             ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID  }}
             ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
             ARM_USE_OIDC: true
  deploy-runners:
    needs: deploy-environment
    runs-on: 'ubuntu-latest'
    env:
      TerraformWorkingDirectory: 'src/infra/terraform/runners/vm'
      StateStoreContainerName: 'tfstate'
      StateStoreFilename: 'runners.tfstate'
    steps:
        - uses: actions/checkout@v4

        - name: Generate registration token
          id: token
          run: |
            token=$(curl -L -X POST -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.GH_PAT }}" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/${{github.repository}}/actions/runners/registration-token)
            
            regToken=$(echo $token | jq '.token' |tr -d \")
            echo registrationToken=$regToken >> $GITHUB_OUTPUT

        - name: Generate SSH Key
          working-directory: ${{ env.TerraformWorkingDirectory }}
          id: ssh-key
          run: |
            ssh-keygen -m PEM -t rsa -b 2048 -N '' -f ~/.ssh/id_rsa <<<y >/dev/null 2>&1
            echo sshKeyFile='~/.ssh/id_rsa.pub' >> $GITHUB_OUTPUT

        - name: Get runner version
          id: runner-version
          run: |
            latest_version_label=$(curl -s https://api.github.com/repos/actions/runner/releases/latest | jq -r '.tag_name')
            latest_version=$(echo $latest_version_label | sed 's/v//g')
            echo runnerVersion="$latest_version" >> $GITHUB_OUTPUT

        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v3
          with:
            terraform_wrapper: false
        
        - name: Azure login
          uses: azure/login@v2
          with:
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
            tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        
        - name: Initialize Terraform
          working-directory: ${{ env.TerraformWorkingDirectory }}
          run: |
              terraform init \
                  -backend-config=resource_group_name=${{ vars.STATE_RESOURCE_GROUP_NAME}} \
                  -backend-config=storage_account_name=${{ vars.STORAGE_ACCOUNT_NAME }} \
                  -backend-config=container_name=${{ env.StateStoreContainerName }} \
                  -backend-config=key=${{ env.StateStoreFilename }}
          env:
            ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
            ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID  }}
            ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
            ARM_USE_OIDC: true

        - name: Plan Terraform
          id: plan
          working-directory: ${{ env.TerraformWorkingDirectory }}
          run: |
            echo vmName=$(terraform output -raw vmName) >> $GITHUB_OUTPUT
            terraform plan -out=tf_plan -var runnerVersion=${{ steps.runner-version.outputs.runnerVersion }} -var adminPassword=${{ secrets.ADMIN_PWD }} -var stateSaContainerName=${{ env.StateStoreContainerName }} -var stateSaName=${{ vars.STORAGE_ACCOUNT_NAME }} -var stateSaRg=${{ vars.STATE_RESOURCE_GROUP_NAME }} -var selfHostedRunnerToken=${{ steps.token.outputs.registrationToken }} -var selfHostedRunnerName="github-runner-${{github.run_id}}" -var githubRepoUrl="https://github.com/${{github.repository}}"
          env:
            ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
            ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID  }}
            ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
            ARM_USE_OIDC: true
            
        - name: Apply Terraform
          id: apply
          working-directory: ${{ env.TerraformWorkingDirectory }}
          run: |
            terraform apply -auto-approve tf_plan
            echo vmName=$(terraform output -raw vmName) >> $GITHUB_OUTPUT
            echo resourceGroupName=$(terraform output -raw resourceGroupName) >> $GITHUB_OUTPUT
          env:
            ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
            ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID  }}
            ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
            ARM_USE_OIDC: true